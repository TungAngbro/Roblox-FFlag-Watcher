{"version":3,"sources":["components/Header.tsx","Util.ts","components/FFlagTypeChip.tsx","api.ts","components/FFlagTable.tsx","components/FFlagData.tsx","App.tsx","pages/Browser.tsx","pages/History.tsx","serviceWorker.ts","index.tsx"],"names":["Header","_this","this","react_default","a","createElement","AppBar_default","color","position","style","flexGrow","Toolbar_default","Typography_default","variant","Tabs_default","value","props","pages","findIndex","page","path","location","pathname","includes","activePath","map","Tab_default","label","title","onClick","history","push","key","Component","withRouter","flagTypes","FFlag","DFFlag","SFFlag","FInt","FString","FLog","DFInt","DFString","DFLog","getFlagType","flag","typeEntry","Object","entries","find","_ref","prefix","slicedToArray","startsWith","_typeEntry","type","name","slice","length","typeStyles","red","LooksOne_default","TextFormat_default","indigo","List_default","blue","Code_default","deepOrange","SettingsRemote_default","teal","ToggleOn_default","getColor","getIcon","_ref3","makeTheme","memoize","theme","createMuiTheme","HistoryEventType","columns","options","customBodyRender","styles","typography","useNextVariants","palette","primary","main","Chip_default","icon","download","filter","Link_default","component","react_router_dom","assign","to","concat","underline","fontSize","borderBottom","display","searchable","noWrap","fontFamily","whiteSpace","wordBreak","filterOptions","sortDirection","Tooltip_default","Date","toLocaleString","react_moment_dist_default","fromNow","FFlagTable","dist_default","data","flags","currentValue","lastUpdated","toISOString","selectableRows","rowsPerPage","rowsPerPageOptions","Infinity","print","filterType","customToolbar","IconButton_default","refresh","Refresh_default","endpoint","str","getFlags","_getFlags","apply","arguments","_callee","regenerator_default","wrap","_context","prev","next","fetch","abrupt","sent","json","stop","FFlagData","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","getData","setState","undefined","_this2","Fragment","children","index_es","marginTop","secondary","FFlagData_FFlagData","FFlagTable_FFlagTable","padding","App","CssBaseline_default","components_Header","react_router","exact","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb262030.chunk.js","sourcesContent":["import AppBar from '@material-ui/core/AppBar'\nimport Tab from '@material-ui/core/Tab'\nimport Tabs from '@material-ui/core/Tabs'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport React, { Component } from 'react'\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\nimport { Page } from '../App'\nimport styles from './Header.module.scss'\n\ninterface HeaderProps extends RouteComponentProps<any> {\n  pages: Page[]\n}\n\nclass Header extends Component<HeaderProps> {\n  render () {\n    return (\n      <AppBar color='primary' position='static' style={{\n        flexGrow: 1\n      }}>\n        <Toolbar>\n          <Typography variant='h6'>\n            Roblox FFlag Watcher\n          </Typography>\n        </Toolbar>\n        <Tabs value={this.props.pages.findIndex(page => (\n          page.path === '/'\n            ? this.props.location.pathname === '/'\n            : this.props.location.pathname.includes(page.activePath || page.path)\n        ))}>\n          {this.props.pages.map(page => (\n            <Tab\n              label={page.title}\n              onClick={() => this.props.history.push(page.activePath || page.path)}\n              key={page.path}\n            />\n          ))}\n        </Tabs>\n      </AppBar>\n    )\n  }\n}\n\nexport default withRouter(Header)\n","const flagTypes = {\n  FFlag: 'Flag',\n  DFFlag: 'Dynamic Flag',\n  SFFlag: 'Studio Flag',\n  FInt: 'Int',\n  FString: 'String',\n  FLog: 'Log',\n  DFInt: 'Dynamic Int',\n  DFString: 'Dynamic String',\n  DFLog: 'Dynamic Log'\n}\n\ninterface FlagType {\n  type?: string\n  name: string\n}\n\nexport function getFlagType (flag: string): FlagType {\n  const typeEntry = Object.entries(flagTypes).find(([prefix]) => flag.startsWith(prefix))\n\n  if (typeEntry) {\n    const [prefix, type] = typeEntry\n\n    return {\n      type,\n      name: flag.slice(prefix.length)\n    }\n  }\n\n  return {\n    name: flag\n  }\n}\n","import { createMuiTheme, MuiThemeProvider } from '@material-ui/core'\nimport Chip from '@material-ui/core/Chip'\nimport blue from '@material-ui/core/colors/blue'\nimport deepOrange from '@material-ui/core/colors/deepOrange'\nimport indigo from '@material-ui/core/colors/indigo'\nimport red from '@material-ui/core/colors/red'\nimport teal from '@material-ui/core/colors/teal'\nimport Code from '@material-ui/icons/Code'\nimport List from '@material-ui/icons/List'\nimport LooksOne from '@material-ui/icons/LooksOne'\nimport SettingsRemote from '@material-ui/icons/SettingsRemote'\nimport TextFormat from '@material-ui/icons/TextFormat'\nimport ToggleOn from '@material-ui/icons/ToggleOn'\nimport React from 'react'\nimport memoize from 'fast-memoize'\n\nconst typeStyles: [string, typeof blue, JSX.Element][] = [\n  ['Dynamic Int', red, <LooksOne />],\n  ['Dynamic String', red, <TextFormat />],\n  ['Int', indigo, <LooksOne />],\n  ['Log', indigo, <List />],\n  ['String', indigo, <TextFormat />],\n  ['Studio', blue, <Code />],\n  ['Dynamic', deepOrange, <SettingsRemote />],\n  ['Flag', teal, <ToggleOn />]\n]\n\nconst getColor = (name: string) => (typeStyles.find(([color]) => name.includes(color)) || [])[1]\n\nconst getIcon = (name: string) => (typeStyles.find(([color]) => name.includes(color)) || [])[2]\n\nconst makeTheme = memoize((theme: any) => createMuiTheme(theme))\n\nexport default function FFlagTypeChip (type: string) {\n  return type && type.length > 0 ?\n    <MuiThemeProvider theme={makeTheme({\n      typography: {\n        useNextVariants: true\n      },\n      palette: {\n        primary: getColor(type) || {\n          main: '#ccc'\n        }\n      }\n    })}>\n      <Chip\n        label={type}\n        color='primary'\n        icon={getIcon(type)}\n      />\n    </MuiThemeProvider>\n  : ''\n}\n","const BASE_URL = process.env.NODE_ENV === 'production'\n  ? '/'\n  : 'http://localhost:8080/'\n\nconst endpoint = (str: string) => BASE_URL + str\n\nexport enum HistoryEventType {\n  Created = 'Created',\n  Removed = 'Removed',\n  Changed = 'Changed'\n}\n\nexport interface Flag {\n  flag: string\n  currentValue?: string\n  lastUpdated?: number\n}\n\nexport interface HistoryEvent {\n  time: number\n  type: HistoryEventType\n  flag: string\n  value?: string\n}\n\nexport async function getFlags (): Promise<Flag[]> {\n  return (await fetch(endpoint('flags'))).json()\n}\n","import IconButton from '@material-ui/core/IconButton'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Typography from '@material-ui/core/Typography'\nimport RefreshIcon from '@material-ui/icons/Refresh'\nimport MUIDataTable from 'mui-datatables'\nimport React, { Component } from 'react'\nimport Moment from 'react-moment'\nimport { Flag } from '../api'\nimport { getFlagType } from '../Util'\nimport FFlagTypeChip from './FFlagTypeChip'\nimport { Link as RouterLink } from 'react-router-dom'\nimport Link from '@material-ui/core/Link'\n\ninterface FFlagTableProps {\n  flags: Flag[]\n  refresh: () => any\n}\n\nconst columns = [\n  {\n    name: 'Type',\n    options: {\n      customBodyRender: FFlagTypeChip,\n      download: false\n    }\n  },\n  {\n    name: 'Flag',\n    options: {\n      filter: false,\n      download: false,\n      customBodyRender: (flag: string) => (\n        <Link\n          component={\n            (props: any) => <RouterLink to={`/history/${flag}`} {...props} />\n          }\n          color='inherit'\n          underline='none'\n          style={{\n            fontSize: 14,\n            borderBottom: '1px dotted silver'\n          }}\n        >\n          {getFlagType(flag).name}\n        </Link>\n      )\n    }\n  },\n  {\n    name: 'Full Name',\n    options: {\n      filter: false,\n      display: false,\n      searchable: true\n    }\n  },\n  {\n    name: 'Value',\n    options: {\n      customBodyRender: (value: string) => (\n        <Typography noWrap={true} style={{\n          fontFamily: 'monospace',\n          fontSize: 14,\n          whiteSpace: 'pre-wrap',\n          wordBreak: 'break-all'\n        }}>{value}</Typography>\n      ),\n      filterOptions: ['True', 'False']\n    }\n  },\n  {\n    name: 'Last Changed',\n    options: {\n      filter: false,\n      sortDirection: 'desc',\n      searchable: false,\n      customBodyRender: (value: string) => (\n        value.length > 0\n          ? <Tooltip title={new Date(value).toLocaleString()}>\n              <Moment fromNow>{value}</Moment>\n            </Tooltip>\n          : <Tooltip title='Created before tracking began'>\n              <Typography style={{\n                color: 'silver'\n              }}>unknown</Typography>\n            </Tooltip>\n      )\n    }\n  }\n]\n\nexport default class FFlagTable extends Component<FFlagTableProps> {\n  render () {\n    return (\n      <MUIDataTable\n        title='Flags'\n        data={this.props.flags.map(flag => {\n          const { type } = getFlagType(flag.flag)\n\n          return [\n            type || '',\n            flag.flag,\n            flag.flag,\n            flag.currentValue || '',\n            flag.lastUpdated ? new Date(flag.lastUpdated).toISOString() : ''\n          ]\n        })}\n        columns={columns as any}\n        options={{\n          selectableRows: false,\n          rowsPerPage: 30,\n          rowsPerPageOptions: [10, 30, 50, 100, 300, 500, 1000, Infinity],\n          print: false,\n          filterType: 'multiselect',\n          customToolbar: () => (\n            <IconButton onClick={this.props.refresh}>\n              <RefreshIcon />\n            </IconButton>\n          )\n        }}\n      />\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { getFlags, Flag } from '../api'\nimport { LinearProgress } from '@material-ui/core'\n\ninterface FFlagDataProps {\n  children: ({ flags, refresh }: {flags: Flag[], refresh: () => any}) => JSX.Element\n}\n\ninterface FFlagDataState {\n  flags?: Flag[]\n}\n\nexport default class FFlagData extends Component<FFlagDataProps, FFlagDataState> {\n  constructor (props: FFlagDataProps) {\n    super(props)\n\n    this.state = {}\n  }\n\n  async componentDidMount () {\n    return this.getData()\n  }\n\n  async getData () {\n    this.setState({\n      flags: undefined\n    })\n\n    this.setState({\n      flags: await getFlags()\n    })\n  }\n\n  render () {\n    return (\n      <React.Fragment>\n        {\n          this.state.flags\n            ? this.props.children({\n              flags: this.state.flags,\n              refresh: () => this.getData()\n            })\n            : (\n              <LinearProgress style={{\n                marginTop: 2\n              }} />\n            )\n        }\n      </React.Fragment>\n    )\n  }\n}\n","import { createMuiTheme, MuiThemeProvider } from '@material-ui/core'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport React, { Component } from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport './App.css'\nimport Header from './components/Header'\nimport Browser from './pages/Browser'\nimport History from './pages/History'\n\nexport const theme = createMuiTheme({\n  typography: {\n    useNextVariants: true\n  },\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#ab47bc'\n    },\n    secondary: {\n      main: '#f48fb1'\n    }\n  }\n})\n\nexport interface Page {\n  path: string,\n  component: () => JSX.Element,\n  title: string\n  activePath?: string\n}\n\nconst pages: Page[] = [\n  {\n    path: '/',\n    component: Browser,\n    title: 'Browser'\n  },\n  {\n    path: '/history/:flag?',\n    activePath: '/history',\n    component: History,\n    title: 'History'\n  }\n]\n\nclass App extends Component {\n  render () {\n    return (\n      <Router>\n        <MuiThemeProvider theme={theme}>\n          <CssBaseline />\n          <Header pages={pages} />\n          {pages.map(page => (\n            <Route\n              exact={page.path === '/'}\n              path={page.path}\n              component={page.component}\n              key={page.path}\n            />\n          ))}\n        </MuiThemeProvider>\n      </Router>\n    )\n  }\n}\n\nexport default App\n","import Grid from '@material-ui/core/Grid'\nimport FFlagTable from '../components/FFlagTable'\nimport FFlagData from '../components/FFlagData'\nimport React from 'react'\n\nexport default function Browser () {\n  return (\n    <FFlagData>\n      {(options) => (\n        <FFlagTable {...options} />\n      )}\n    </FFlagData>\n  )\n}\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\n\nexport default function History () {\n  return <Typography style={{\n    padding: 100\n  }}>Coming Soon</Typography>\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}